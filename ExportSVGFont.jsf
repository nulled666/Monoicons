// SVG FONT EXPORTER
// Based on the ExportSVG.jsp Extension by Aaron Beall 2010-2011
//
// NOTE:
// - If the exported glyph's inner hollow part becomes solid,
//   please select the inner contour path and use the
//   "Reverse Contours" command in the Path panel to correct it.


var SCRIPT_NAME = "SVG Font Exporter"
var VERSION = "0.2.1";


//////////////////////////////////////////////////////////////////////////////////////

// CONFIG

var FONT_NAME = 'monoicons';
var CLASS_PREFIX = 'mi';
var AUTHOR_NAME = 'SiC';
var AUTHOR_EMAIL = 'nulled666@gmail.com';

var ASK_SAVE_PATH = false;
var FILE_NAME = 'monoicons'; // the default file name if not ask for save path

var FONT_VERSION = (function(){
	var now = new Date();
	var s = now.getFullYear() + '.' + addZero(now.getMonth()+1, 2) + '.' +  addZero(now.getDay()+1, 2) + '.' +
		addZero(now.getHours(),2) + addZero(now.getMinutes(),2) + addZero(now.getSeconds(),2);
	return s;
})();

var GENERATED_BY =
		'Generated by '+ SCRIPT_NAME + ' v' + VERSION +
		' with ' + fw.appName +
		'at ' + (new Date()).toUTCString();


//////////////////////////////////////////////////////////////////////////////////////

// EXTRA PARAMS
var INDENT = "\t";
var NEWLINE = "\n";

var NUMBER_PRECISION = 4;
var SKIP_HIDDEN_LAYERS = false;
var SKIP_HIDDEN_OBJECTS = true;

var GLYPH_SIZE = 1200;  // the default glyph size we need to resize to
var GLYPH_DESCENT = -240;
var GLYPH_ASCENT = GLYPH_SIZE + GLYPH_DESCENT;

var UNICODE_CODE_START = 0xe001;

var ITEM_PER_ROW = 5; // in html file


//////////////////////////////////////////////////////////////////////////////////////

// GLOBAL VARIABLES

var _dom = fw.getDocumentDOM();	// document object

// default save path for output - same directory as the source image
var _save_path = Files.setFilename( _dom.filePathForRevert, FILE_NAME +".svg");

var _svg_output = '';
var _css_output = '';
var _html_output = '';

var _item_count = 0;			// overall glyph count
var _row_item_count = 0;		// used for html generation

var _slice_offset = [0, 0];		// hold the current slice's offset for coordinates transformation
var _zoom_ratio = 1;			// hold the ratio zoom ratio for slices with different sizes


//////////////////////////////////////////////////////////////////////////////////////

// MAIN PROCEDURE

function ExportSVG() {

	if (!_dom)
		return false;
	
	// prompt user for save location
	var fileURL, dirURL;

	if( ASK_SAVE_PATH ){
		
		// last save location
		var lastDir = _dom.lastExportDirectory || Files.makePathFromDirAndFile(fw.getPref("LastExportSVGLocation"), "");
		var filePathForSave = _dom.filePathForSave;
		if(Files.exists(lastDir)){
			_dom.filePathForSave = lastDir;
		}else{
			filePathForSave = null;
		}
		
		// save file with validation
		do{
			fileURL = fw.browseForFileURL("save");
		}while(fileURL && fileURL.length && !validateFile(fileURL));
		dirURL = Files.getDirectory(fileURL);
		
		function validateFile(){
			var ext = Files.getExtension(fileURL);
			if(ext.toLowerCase() != ".svg"){
				var name = Files.getFilename(fileURL);
				name = name.substr( 0, name.lastIndexOf(ext) );
				name = name + ".svg";			
				fileURL = Files.setFilename(fileURL, name);
			}
			return true;
		}
		
		// restore file path for save
		if(filePathForSave)
			_dom.filePathForSave = filePathForSave;
		
		
		// exit if dialog canceled
		if(!fileURL || !dirURL)
			return false;
		
		// store location
		_dom.lastExportFile = Files.getFilename(fileURL);
		_dom.lastExportDirectory = dirURL;
		fw.setPref("LastExportSVGLocation", _dom.lastExportDirectory)
		
	}
	
	// render
	parseDocument();
	
	// write to file
	writeSVG();
	writeCSS();
	writeHTML();
	
	
	////////////////////////////////////////////////////////////////////////////////////////
	
	// OUTPUT ROUTINES
	
	
	// write svg output to file
	function writeSVG(){
		
		var output = '\
<?xml version="1.0" encoding="utf-8"?>\
<!-- ' + FONT_NAME + ' - '+ _item_count + ' icons - ' + FONT_VERSION +' -->\
<!-- ' + GENERATED_BY + ' -->\
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\
<svg xmlns="http://www.w3.org/2000/svg">\
	<defs>\
		<font id="'+ FONT_NAME +'" horiz-adv-x="' + GLYPH_SIZE + '" >\
			<font-face units-per-em="' + GLYPH_SIZE + '" ascent="' + GLYPH_ASCENT + '" descent="' + GLYPH_DESCENT + '" />\
			<missing-glyph horiz-adv-x="' + Math.floor(GLYPH_SIZE/2) + '" />\
			' + _svg_output + '\
		</font>\
	</defs>\
</svg>';
		
		writeFile( _save_path, output);
		
	}
	
	
	// write css file
	function writeCSS(){
		
		var output = '\
/* ' + FONT_NAME + ' - ' + _item_count + ' icons - ' + FONT_VERSION + ' */\n\
/* ' + GENERATED_BY + ' */\n\n\
@font-face {\n\
	font-family: "' + FILE_NAME + '";\n\
	src: url(' + FILE_NAME + '.eot); /* IE9 Compat Modes */\n\
	src:\n\
		url(' + FILE_NAME + '.eot?#iefix) format("embedded-opentype"), /* IE6-IE8 */\n\
		url(' + FILE_NAME + '.woff) format("woff"), /* Modern Browsers */\n\
		url(' + FILE_NAME + '.ttf)  format("truetype"), /* Safari, Android, iOS */\n\
		url(' + FILE_NAME + '.svg) format("svg") /* Legacy iOS */\n\
	;\n\
	font-style: normal;\n\
	font-weight: normal;\n\
}\n\n\
[class^="'+CLASS_PREFIX+'-"]:before,\n\
.'+CLASS_PREFIX+'box {\n\
	font-family: "' + FILE_NAME + '";\n\
	font-style: normal;\n\
	line-height: 1;\n\
}\n\n\
' + _css_output;
		
		var path = Files.setFilename(_save_path, FILE_NAME + ".css");
		writeFile( path, output);

	}

	
	// write html file
	function writeHTML(){
	
		var output = '\
<!DOCTYPE html>\n\
<head>\n\
<html lang="en">\n\
<head>\n\
	<meta name="generator" value="' + GENERATED_BY + '">\n\
	<title>'+ FONT_NAME + ' - ' + _item_count + ' icons - ' + FONT_VERSION + ' </title>\n\
	<link href="' + FILE_NAME + '.css" rel="stylesheet">\n\
	<style>\n\
		body{\
			margin: 0 0 100px 0;\
			padding: 0;\
			font-family: Arial;\
			font-size: 14px;\
			color: #666;\
			background: #fff;\
		}\
		.title{\
			position: fixed;\
			left: 0;\
			top: 16px;\
			margin: 0;\
			padding: 10px 40px;\
			font-size: 14px;\
			color: #fff;\
			background: #0066ff;\
			outline: 4px solid #fff;\
		}\
		.title h1 {\
			display: inline-block;\
			vertical-align: middle;\
			margin: 10px 0;\
			font-weight: normal;\
			font-size: 48px;\
		}\
		.info {\
			display: inline-block;\
			vertical-align: middle;\
			margin: 0 20px;\
			padding: 10px 20px;\
			line-height: 150%;\
			border: 1px solid #438CF9;\
			border-width: 0 1px 0 1px;\
		}\
		.info a{\
			color: #fff;\
		}\
		.controls {\
			display: inline-block;\
			vertical-align: middle;\
		}\
		.switch {\
			display: inline-block;\
			margin: 4px 0 0 0;\
			font-size: 0;\
			font-family: Consolas, Courier New;\
		}\
		.switch a {\
			display: inline-block;\
			margin: 0 1px 0 0;\
			padding: 2px 6px;\
			font-size: 12px;\
			cursor: pointer;\
			color: #0066ff;\
			background: #7FB2FE;\
		}\
		.switch a:hover {\
			background: #fff;\
		}\
		.switch .active {\
			background: #fff;\
		}\
		.switch .invert,\
		.switch .invert:hover{\
			position: relative;\
			top: 12px;\
			background: none;\
		}\
		.switch .invert i{\
			color:#7FB2FE;\
			font-size: 14px;\
		}\
		.switch .invert:hover i{\
			color: #fff;\
		}\
		.switch input{\
			margin: 0 1px;\
			padding: 0 8px;\
			width: 60px;\
			color: #98C3FE;\
			background: none;\
			border: none;\
			border-bottom: 1px solid #66A5FE;\
		}\
		table {\
			margin: 140px 0 0 20px;\
		}\
		td {\
			padding: 4px 12px;\
		}\
		i {\
			font-size: 14px;\
			color: #333;\
		}\
		tr:hover {\
			background-color: rgba(0,0,0,0.05);\
		}\
		td:hover {\
			color: #FFF;\
			background-color: #333;\
		}\
		td:hover i {\
			color: #FFF;\
		}\
	</style>\n\
	<script>\
	var last_size = 14;\
	var last_color = "#333";\
	var bg_color = "#fff";\
	function id(id){\
		return document.getElementById(id);\
	}\
	function invert(){\
		var t = last_color;\
		last_color = bg_color;\
		bg_color = t;\
		id("color_input").value = last_color;\
		id("bg_input").value = bg_color;\
		set();\
	}\
	function set(){\
		var color = last_color;\
		var bg = bg_color;\
		var size = last_size;\
		var sheet = document.styleSheets[1];\
		var rules = sheet.cssRules? sheet.cssRules: sheet.rules;\
		for (i=0; i<rules.length; i++){\
			if(rules[i].selectorText.toLowerCase()=="i"){\
				t = rules[i];\
				t.style.color = color;\
				t.style.fontSize = size + "px";\
				document.body.style.background = bg;\
				break;\
			}\
		}\
	}\
	function color_change(str){\
		var o = id("color_input");\
		if(str){ o.value = str; }\
		var v = o.value;\
		last_color = v;\
		set();\
	}\
	function bg_change(str){\
		var o = id("bg_input");\
		if(str){ o.value = str; }\
		var v = o.value;\
		bg_color = v;\
		set();\
	}\
	function set_size(mode){\
		var o = id("font_size");\
		var v = parseInt(o.value,10);\
		if(isNaN(v)){\
			o.value = 14;\
			return;\
		}\
		if(mode!=undefined){\
			if(mode){\
				v += 14;\
			}else{\
				v -=14;\
				if(v<=0) v=14;\
			}\
			o.value = v;\
		}\
		last_size = v;\
		set();\
	}\
	</script>\n\
</head>\n\
<body>\n\
<div class="title">\n\
	<h1>'+ FONT_NAME + '</h1>\
	<div class="info">\
		' + _item_count + ' icons by\
		<a href="mailto:' + AUTHOR_EMAIL + '">'+ encodeHTML(AUTHOR_NAME) + '</a><br/>\
		version '+ FONT_VERSION +'\
	</div>\
	<div class="controls">\
		<div class="switch">\
			<a onclick="color_change(\'#333\')">B</a>\
			<a onclick="color_change(\'#FFF\')">W</a>\
			<a onclick="color_change(\'#d93600\')">R</a>\
			<a onclick="color_change(\'#85b200\')">G</a>\
			<a onclick="color_change(\'#006dd9\')">B</a>\
			<input id="color_input" onchange="color_change()" value="#333"/>\
			<a onclick="invert()" class="invert"><i class="icon-swap-v"></i></a>\
		</div>\
		<br/>\
		<div class="switch">\
			<a onclick="bg_change(\'#333\')">B</a>\
			<a onclick="bg_change(\'#FFF\')">W</a>\
			<a onclick="bg_change(\'#d93600\')">R</a>\
			<a onclick="bg_change(\'#85b200\')">G</a>\
			<a onclick="bg_change(\'#006dd9\')">B</a>\
			<input id="bg_input" onchange="bg_change()" value="#fff"/>\
		</div>\
		<br/>\
		<div class="switch">\
			<a onclick="set_size(true)">+</a>\
			<a onclick="set_size(false)">-</a>\
			<input id="font_size" onchange="set_size()" value="14"/>\
		</div>\
	</div>\
</div>\n\
<table cellspacing="0">\n\
<tr>\n\
' + _html_output + '\
</tr>\n\
</table>\n\
</body>\n\
</html>\n';
		
		var path = Files.setFilename(_save_path, FILE_NAME + ".htm");
		writeFile( path, output);

	}
	
	// file writer
	function writeFile( fileURL, output ){
		
		Files.deleteFileIfExisting(fileURL);
		Files.createFile(fileURL, Files.getExtension(fileURL), fw.appMacCreator);
		var file = Files.open(fileURL, true, "utf8");

		if( file ){
			file.writeUTF8(output);
			file.close();
		}else{
			return alert("ERROR: Unable to write file.\n - " + fileURL);
		}
		
	}

	
	////////////////////////////////////////////////////////////////////////////////////////
	
	// PARSER & GENERATOR
	
	function parseDocument(){
		
		var layers = (_dom.topLayers || _dom.layers);
		var slices = [];
		
		var i = layers.length;
		while(i--){
			var obj = layers[i];
			if(obj.layerType == "web"){
				slices = obj.elems;
			}else{
				// unlock the layer for us to select its content
				// or you'll have blank output
				_dom.setLayerLocked(i, 0, false, true);
			}
		}
		
		// parse the document
		_svg_output = parseObjects(slices);
		
	}
	
	
	// parse out a list of objects
	function parseObjects(objects){
		
		var svgStr = "";
		
		var i = objects.length;
		while(i--){
			
			var elem = objects[i];
			
			if(elem.toString() =="[object SliceHotspot]"){
				svgStr += renderSlice(elem);
			}
		}
		
		return svgStr;

	}

		
	// render slice
	function renderSlice(elem){
		
		var svgStr = '';
		
		// rectangle slice only
		if(elem.shape == "rectangle"){
			svgStr += renderSliceElements(elem);
		}

		return svgStr;
	}


	// get ordered id
	function getId(){
		var s = UNICODE_CODE_START.toString(16);
		UNICODE_CODE_START++;
		return s;
	}

	// renders all elements within a slice
	function renderSliceElements( slice ){

		var rect = slice.pixelRect;

		_zoom_ratio = GLYPH_SIZE / slice.width;
		_slice_offset = [rect.left, rect.top];
		
		var elems = _dom.elementsAt(rect);

		if(elems.length < 1) return "";
		
		var str = parsePathObjects(elems);
		var name = slice.baseName || false;
		var numId = getId();
		var id = slice.altText || '&#x'+ numId +';';
		
		if(str != ""){
			str = '<glyph unicode="' + id + '" '+
			'd="' + str + '" />\n';
		}
		
		var className = name || numId;
		className = CLASS_PREFIX + '-' + className;
		
		_css_output += '.'+ className +':before{content:"\\'+ numId +'"}\n';
		
		_html_output +=
			'<td title="' + id.replace(/&/g, '&amp;') + '">'+
			'<i class="'+ className +'"></i>'+
			' <span>.'+ className + '</span>' +
			'</td>';
		
		_row_item_count++;
		if(_row_item_count >= ITEM_PER_ROW){
			_html_output += '</tr>\n<tr>\n';
			_row_item_count = 0;
		}
		
		_item_count++;
		
		return str;

	}


	// parse out a list of objects as paths
	function parsePathObjects(objects){
		
		var svgStr = "";
		
		var i = objects.length;
		while(i--){
			
			var elem = objects[i];
			
			if(elem.hasOwnProperty("visible") && !elem.visible && SKIP_HIDDEN_OBJECTS)
				continue;
			
			switch(elem.toString()){
				case "[object Path]":
					svgStr += renderPath(elem);
					break;
				
				case "[object CompoundShape]":
					svgStr += renderPath(elem.resultantPath);			
					break;
			}

		}
		
		return svgStr;

	}

	
	// render a path
	function renderPath(elem){
		
		// path data
		var data = "";
		var contours = elem.contours || [elem.contour];
		for(var c = 0; c < contours.length; c++){
			var contour = contours[c];
			var nodes = contour.nodes;
			
			// move to new contour
			data += "M" + genPoint(nodes[0].x, nodes[0].y);
			
			for(var n = 1; n <= nodes.length; n++){
				
				// non closed contours
				if(!contour.isClosed && n == nodes.length)
					break;
				
				// determine two bordering nodes
				var node = nodes[n < nodes.length ? n : 0];
				var prevNode = nodes[n > 0 ? n - 1 : nodes.length - 1]
				
				// draw between the nodes
				if(node.predX == node.x && node.predY == node.y && prevNode.succX == prevNode.x && prevNode.succY == prevNode.y){
					// line to
					data += "L" + genPoint(node.x, node.y);
				}else{
					// curve to
					data += "C" + genPoint(prevNode.succX, prevNode.succY) 
						+ " " + genPoint(node.predX, node.predY) 
						+ " " + genPoint(node.x, node.y);
				}
			}
			
			// closed contour
			if(contour.isClosed)
				data += "Z";
		}
		
		return data;
	}
	
	// generate a point string
	function genPoint(x, y){
		var pos = transformPos(x, y);
		return round(pos[0]) + " " + round(pos[1]);
	}
	
	// transform base on the rect offset and zoom ratio
	function transformPos( x, y ){
		
		x = Number(x);
		y = Number(y);
		
		x = (x - _slice_offset[0]) * _zoom_ratio;
		// font uses a different coordinates system
		y = GLYPH_SIZE + (_slice_offset[1] - y) * _zoom_ratio;
		
		return [x, y];
		
	}

}

// round a number to an allowed maximum precision
function round(num){
	return Number(Number(num).toFixed(NUMBER_PRECISION));
}

// add leading zero on numbers
function addZero(num, len){
	var s = num.toString();
	while(s.length<len) s = "0"+s;
	return s;
}

// escape html
function encodeHTML(str){
	return str.replace(/\&/g, "&amp;")
		.replace(/\>/g, "&gt;")
		.replace(/\</g, "&lt;")
		.replace(/\"/g, "&quot;")
		.replace(/\'/g, "&#39;")
		.replace(/\n/g, "<br/>")
		.replace(/\s/g, "&nbsp;");
}

// execute
try{
	ExportSVG();
}catch(e){ alert("Error\nline: " + e.lineNumber + "\n" + e.message) }